//-----------------------------------------------------
// Basic String Ops

// Length: str.length
// Access: str[i]
// Slice: str.slice(start, end)
// Search: str.indexOf(), str.lastIndexOf(), str.includes()
// Change case: str.toLowerCase(), str.toUpperCase()
// Replace: str.replace(), str.replaceAll()
// Split: str.split(delimiter) → string ➜ array
// Join: array.join(delimiter) → array ➜ string
//-----------------------------------------------------
// str.split("").reverse().join("");
//-----------------------------------------------------
// Palindrome (Two Pointers)

// let left = 0, right = str.length - 1;
// while (left < right) {
//   if (str[left] !== str[right]) return false;
//   left++;
//   right--;
// }
// return true;
//-----------------------------------------------------
// Frequency Map

// let freq = {};
// for (let char of str) {
//   freq[char] = (freq[char] || 0) + 1;
// }
//-----------------------------------------------------
// Check Anagram (Sort)

// str1.split("").sort().join("") === str2.split("").sort().join("");
//-----------------------------------------------------
// Sliding Window (Longest Unique Substring)

// let left = 0, right = 0, seen = new Set(), maxLen = 0;
// while (right < str.length) {
//   if (!seen.has(str[right])) {
//     seen.add(str[right++]);
//     maxLen = Math.max(maxLen, right - left);
//   } else {
//     seen.delete(str[left++]);
//   }
// }
//-----------------------------------------------------
// let str = "laptop";
// console.log(str[0]);
// console.log(str[str.length - 1]);
// console.log(str.length);
//-----------------------------------------------------
// Slice - Returns part of the string from start to end (not including end).

// let str = "javascript";
// console.log(str.slice(0, 4));
// console.log(str.slice(4));
// console.log(str.slice(-3));
//-----------------------------------------------------
// let str = "developer";
// // 1. Extract "devel"
// console.log(str.slice(0, 5));
// // 2. Extract "oper" using negative index
// console.log(str.slice(-4));
// // 3. Extract "velo"
// console.log(str.slice(2, 6));
//-----------------------------------------------------
// indexOf(value) → gives first position.
// lastIndexOf(value) → gives last position.

// let str = "programming";
// console.log(str.indexOf("g"));
// console.log(str.lastIndexOf("g"));
// console.log(str.indexOf("z"));
//-----------------------------------------------------
// let str = "DeveLoper";
// console.log(str.toLowerCase());
// console.log(str.toUpperCase());
//-----------------------------------------------------
// let str = "I love cats";
// console.log(str.replace("cats", "dogs"));
// let str2 = "apple apple apple";
// console.log(str2.replaceAll("apple", "orange"));
// let str3 = "I am learning javascript javascript";
// console.log(str3.replace("javascript", "DSA"));
// console.log(str3.replaceAll("javascript", "DSA"));
//-----------------------------------------------------
// Splitting & Joining

// let str = "a b c d";
// let arr = str.split(" ");
// console.log(arr);
// console.log(arr.join("-"));
//-----------------------------------------------------
// let str = "hello";
// console.log(str.split("").reverse().join(""));
//-----------------------------------------------------
// Palindrome

// function isPalindrome(str) {
//   let rev = str.split("").reverse().join("");
//   if (str === rev) {
//     console.log(true);
//   } else {
//     console.log(false);
//   }
// }
// isPalindrome("madam");
// isPalindrome("hello");
//-----------------------------------------------------
// freq is an object

// let str = "hello";
// let freq = {};
// for (let char of str) {
//   if (freq[char]) {
//     freq[char]++;
//   } else {
//     freq[char] = 1;
//   }
// }
// console.log(freq);
//-----------------------------------------------------
// Two Pointers

// function isPalindrome(str) {
//   let left = 0;
//   let right = str.length - 1;
//   while (left < right) {
//     if (str[left] !== str[right]) {
//       return false;
//     }
//     left++;
//     right--;
//   }
//   return true;
// }
// console.log(isPalindrome("racecar"));
// console.log(isPalindrome("test"));
//-----------------------------------------------------
// Sliding Window

// function lengthOfLongestSubstring(s) {
//   let left = 0;
//   let right = 0;
//   let seen = new Set();
//   let maxLen = 0;

//   while (right < s.length) {
//     if (!seen.has(s[right])) {
//       seen.add(s[right]);
//       maxLen = Math.max(maxLen, right - left + 1);
//       right++;
//     } else {
//       seen.delete(s[left]);
//       left++;
//     }
//   }

//   return maxLen;
// }
// console.log(lengthOfLongestSubstring("abcabcbb")); // 3
// console.log(lengthOfLongestSubstring("bbbbb")); // 1
// console.log(lengthOfLongestSubstring("pwwkew")); // 3
//-----------------------------------------------------
// checks if two strings are anagrams

// function isAnagram(str1, str2) {
//   let sort1 = str1.split("").sort().join("");
//   let sort2 = str2.split("").sort().join("");
//   return sort1 === sort2;
// }
// console.log(isAnagram("listen", "silent"));
// console.log(isAnagram("hello", "world"));
//-----------------------------------------------------
// function countLetters(str) {
//   let freq = {};
//   for (let char of str) {
//     if (freq[char]) {
//       freq[char]++;
//     } else {
//       freq[char] = 1;
//     }
//   }
//   return freq;
// }

// function isAnagram(str1, str2) {
//   let freq1 = countLetters(str1);
//   let freq2 = countLetters(str2);

//   // Compare the keys and values
//   for (let char in freq1) {
//     if (freq1[char] !== freq2[char]) {
//       return false;
//     }
//   }

//   for (let char in freq2) {
//     if (freq2[char] !== freq1[char]) {
//       return false;
//     }
//   }

//   return true;
// }

// console.log(isAnagram("listen", "silent"));
// console.log(isAnagram("hello", "world"));

//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
//-----------------------------------------------------
